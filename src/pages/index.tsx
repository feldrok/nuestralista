import type { CreateNextContextOptions } from "@trpc/server/adapters/next";
import { type NextPage } from "next";
import { signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { getServerAuthSession } from "../server/auth";
import { Listbox, Menu, Popover, Transition } from "@headlessui/react";
import {
  CheckIcon,
  ChevronUpDownIcon,
  PlusIcon,
  TrashIcon,
} from "@heroicons/react/20/solid";

import { api } from "../utils/api";
import React, { Fragment, useState } from "react";
import type { List } from "@prisma/client";
import NewItem from "./components/NewItem";

export const getServerSideProps = async ({
  req,
  res,
}: CreateNextContextOptions) => {
  const session = await getServerAuthSession({ req, res });
  if (!session?.user) {
    return {
      redirect: {
        destination: "/login",
      },
    };
  }
  return {
    props: {
      session,
    },
  };
};

const Home: NextPage = () => {
  const [selected, setSelected] = useState<List | null>(null);
  const [listInput, setListInput] = useState<string>("");
  const [itemInput, setItemInput] = useState<string>("");
  const context = api.useContext();
  const { data: session } = useSession();
  const { data: lists } = api.lists.getAll.useQuery();
  const { data: items, isLoading } = api.items.getAll.useQuery({
    listId: selected?.id ?? "",
  });
  const { mutate: addList } = api.lists.addList.useMutation({
    onSettled: async () => {
      setListInput("");
      await context.lists.getAll.invalidate();
    },
  });
  const { mutate: addItem, isLoading: newItemLoading } =
    api.items.addItem.useMutation({
      onSettled: async () => {
        await context.items.getAll.invalidate();
      },
    });
  const { mutate: updateItem } = api.items.updateItem.useMutation({
    onSettled: async () => {
      setItemInput("");
      await context.items.getAll.invalidate({
        listId: selected?.id ?? "",
      });
    },
  });
  const { mutate: deleteItem, isLoading: deletingItem } =
    api.items.deleteItem.useMutation({
      onSettled: async () => {
        await context.items.getAll.invalidate({
          listId: selected?.id ?? "",
        });
      },
    });

  const handleAddList = () => {
    addList({ name: listInput });
  };

  const handleAddItem = (e: React.FormEvent) => {
    e.preventDefault();
    addItem({
      listId: selected?.id ?? "",
      name: itemInput,
    });
    setItemInput("");
  };

  return (
    <>
      <Head>
        <title>Nuestra Lista</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav className="flex items-center justify-between bg-gray-200 p-4 shadow-sm">
        <Menu as="div" className="relative inline-block text-left">
          <Menu.Button>
            <Image
              src={`${session?.user.image as string}`}
              alt="Avatar"
              className="rounded-full shadow-md duration-75 hover:scale-105"
              width={40}
              height={40}
            />
          </Menu.Button>
          <Transition
            as={Fragment}
            enter="transition ease-out duration-100"
            enterFrom="transform opacity-0 scale-95"
            enterTo="transform opacity-100 scale-100"
            leave="transition ease-in duration-75"
            leaveFrom="transform opacity-100 scale-100"
            leaveTo="transform opacity-0 scale-95"
          >
            <Menu.Items className="absolute left-0 mt-2 w-36 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
              <Menu.Item>
                {({ active }) => (
                  <button
                    className={`${
                      active ? "bg-gray-200" : "text-gray-900"
                    } group flex w-full items-center rounded-md px-2 py-2 text-sm`}
                    onClick={() => void signOut()}
                  >
                    Cerrar sesi√≥n
                  </button>
                )}
              </Menu.Item>
            </Menu.Items>
          </Transition>
        </Menu>
        <div className="flex gap-2">
          <Listbox value={selected} onChange={setSelected}>
            <div className="relative">
              <Listbox.Button className="relative w-56 cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-300 sm:text-sm">
                <span className="block">
                  {selected !== null ? selected.name : "Selecciona una lista"}
                </span>
                <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                  <ChevronUpDownIcon
                    className="h-5 w-5 text-gray-400"
                    aria-hidden="true"
                  />
                </span>
              </Listbox.Button>
              <Transition
                as={Fragment}
                enter="transition ease-out duration-100"
                enterFrom="transform opacity-0 scale-95"
                enterTo="transform opacity-100 scale-100"
                leave="transition ease-in duration-75"
                leaveFrom="transform opacity-100 scale-100"
                leaveTo="transform opacity-0 scale-95"
              >
                <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
                  {lists?.map((list, listIdx) => (
                    <Listbox.Option
                      key={listIdx}
                      className={({ active }) =>
                        `relative cursor-default select-none py-2 pl-10 pr-4 ${
                          active ? "bg-gray-100" : "text-gray-900"
                        }`
                      }
                      value={list}
                    >
                      {({ selected }) => (
                        <>
                          <span
                            className={`block truncate ${
                              selected ? "font-medium" : "font-normal"
                            }`}
                          >
                            {list.name}
                          </span>
                          {selected ? (
                            <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-600 ">
                              <CheckIcon
                                className="h-5 w-5"
                                aria-hidden="true"
                              />
                            </span>
                          ) : null}
                        </>
                      )}
                    </Listbox.Option>
                  ))}
                </Listbox.Options>
              </Transition>
            </div>
          </Listbox>
          <Popover className={"relative"}>
            <Popover.Button className="flex h-full w-9 items-center justify-center rounded-lg bg-[rgb(77,91,190)] shadow-md hover:bg-[rgb(112,127,238)]">
              <PlusIcon className="h-6 w-6 text-white" />
            </Popover.Button>
            <Transition
              as={Fragment}
              enter="transition ease-out duration-200"
              enterFrom="opacity-0 translate-y-1"
              enterTo="opacity-100 translate-y-0"
              leave="transition ease-in duration-150"
              leaveFrom="opacity-100 translate-y-0"
              leaveTo="opacity-0 translate-y-1"
            >
              <Popover.Panel className="absolute right-0 z-10 mt-3 ">
                <div className="overflow-hidden rounded-xl shadow-lg ">
                  <form
                    onSubmit={handleAddList}
                    className="flow-root rounded-md bg-white p-4 transition duration-150 ease-in-out focus:outline-none focus-visible:ring focus-visible:ring-orange-500 focus-visible:ring-opacity-50"
                  >
                    <input
                      type="text"
                      onChange={(e) => setListInput(e.target.value)}
                      className="outline-none"
                      placeholder="Nueva lista"
                    />
                  </form>
                </div>
              </Popover.Panel>
            </Transition>
          </Popover>
        </div>
      </nav>
      <main className="pt-4">
        <div className="mx-auto flex max-w-2xl flex-col justify-center p-2">
          {selected === null ? (
            <div className="flex flex-col items-center justify-center">
              <h1 className="text-2xl text-black">
                Selecciona o crea una nueva lista
              </h1>
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center">
              <h1 className="text-2xl font-bold text-black">{selected.name}</h1>
            </div>
          )}

          <ul className="grid w-full max-w-2xl grid-cols-1 gap-4 rounded-xl pt-4">
            {isLoading && selected !== null ? (
              <p className="text-black">Cargando...</p>
            ) : (
              <>
                {items?.length !== 0 ? (
                  items?.map((item, itemIdx) => (
                    <li
                      key={itemIdx}
                      className="flex items-center justify-between rounded-lg bg-white p-4 shadow-md"
                    >
                      <div className="flex items-center gap-4">
                        <input
                          type="checkbox"
                          className="accent-cyan-600 "
                          checked={item.checked}
                          onChange={() => {
                            updateItem({
                              id: item.id,
                              checked: !item.checked,
                            });
                          }}
                        />
                        <span className="text-gray-800">{item.name}</span>
                      </div>
                      <button
                        onClick={() => {
                          deleteItem(item);
                        }}
                        disabled={deletingItem ? true : false}
                      >
                        <TrashIcon
                          className={`h-5 w-5 ${
                            deletingItem ? "text-gray-300" : "text-gray-800"
                          }`}
                        />
                      </button>
                    </li>
                  ))
                ) : selected !== null ? (
                  <p className="text-black">Tu lista est√° vac√≠a</p>
                ) : null}
                {newItemLoading ? (
                  <li className="text-black">Creando item...</li>
                ) : null}
              </>
            )}
          </ul>
        </div>
        <NewItem
          onSubmit={handleAddItem}
          setFunction={setItemInput}
          inputValue={itemInput}
        />
      </main>
    </>
  );
};

export default Home;
